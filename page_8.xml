<?xml version="1.0" encoding="UTF-8"?>
<main>
  <PageData>
      <MainHeading><![CDATA[<b>Functions</b>]]></MainHeading>
    <SubHeading><![CDATA[]]></SubHeading>
      
    <PageText>
      <pText><![CDATA[The following specifies simple rules for defining a function.]]></pText>
    </PageText>
     
    <PageText>
      <pText><![CDATA[
        <ul class = "ListClassDisc">
        <li>Function block or Function header begins with the keyword def followed by the function name and parentheses ( ( ) ).</li>
        <li>Any input parameters or arguments should be placed within these parentheses. We can also define parameters inside these parentheses.</li>
        <li>The first string after the function header is called the docstring and is short for documentation string. It is used to explain in brief, what a function does. Although optional, documentation is a good programming practice.</li>
        <li>The code block within every function starts with a colon (:) and is indented.</li>
        <li>The return statement [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None. We can also write a function without return statement.</li>
        </ul>
]]></pText>
    </PageText>
   
    <PageText>
        <pText><![CDATA[<b>Syntax</b>]]></pText>
    </PageText>
      
      <PageText>
          <pText><![CDATA[
    <div class = "CodeBox">
    <div>def functionname( parameters ):</div>
    <div>“function_docstring”</div>
    <div>function_suite</div>
    <div>return [expression]</div>
    </div>
]]></pText>
    </PageText>
     
    <PageText>
        <pText><![CDATA[<b>Example Program with Return Statement</b>]]></pText>
    </PageText>
      
      <PageText>
          <pText><![CDATA[
    <div class = "CodeBox">
    <div>def sum_of_two_numbers(a,b): #Function Header with 2 parameters a and b</div>
    <div>“This Function is to find the sum of two numbers” #Docstring </div>
    <div>sum=a+b</div>
    <div>return sum</div>
    </div>
]]></pText>
    </PageText>
     
    <PageText>
        <pText><![CDATA[<b>Example Program without Return Statement</b>]]></pText>
    </PageText>
      
      <PageText>
          <pText><![CDATA[
    <div class = "CodeBox">
    <div>def sum_of_two_numbers(a,b): #Function Header with 2 parameters a and b </div>
    <div>“This Function is to find the sum of two numbers” #Docstring </div>
    <div>sum=a+b</div>
    <div>print(“sum=”,sum)</div>
    </div>
]]></pText>
    </PageText>
     
    <PageText>
        <pText><![CDATA[After defining a function, we can call the function from another function or directly from the Python prompt. The order of the parameters specified in the function definition should be preserved in function call also.]]></pText>
    </PageText>
   
    <PageText>
        <pText><![CDATA[<b>Example Program for Function Calling with Return Statement</b>]]></pText>
    </PageText>
      
      <PageText>
          <pText><![CDATA[
    <div class = "CodeBox">
    <div>#Main Program Code</div>
    <div>a = int(input(“Enter the first number:”))</div>
    <div>b = int(input(“Enter the second number:”))</div>
    <div>s = sum_of_two_numbers(a,b)#Function calling</div>
    <div>print(“Sum of”,a,”and”,b,”is”, s)</div>
    </div>
]]></pText>
    </PageText>
      
    <PageText>
        <pText><![CDATA[<b>Output</b>]]></pText>
    </PageText>
     
    <PageText>
        <pText><![CDATA[
        <div class = "TextBorderClass">
        <div>Enter the first number:4 </div>
        <div>Enter the second number:3</div>
        <div>Sum of 4 and 3 is 7</div>
        </div>
]]></pText>
    </PageText> 
    
    <PageText>
        <pText><![CDATA[<b>Example Program for Function Calling without Return Statement</b>]]></pText>
    </PageText>
      
      <PageText>
          <pText><![CDATA[
    <div class = "CodeBox">
    <div>#Main Program Code</div>
    <div>a = int(input(“Enter the first number:”))</div>
    <div>b = int(input(“Enter the second number:”))</div>
    <div>s = sum_of_two_numbers(a,b)#Function calling</div>
    </div>
]]></pText>
    </PageText>
      
    <PageText>
        <pText><![CDATA[<b>Output</b>]]></pText>
    </PageText>
     
    <PageText>
        <pText><![CDATA[
        <div class = "TextBorderClass">
        <div>Enter the first number:4 </div>
        <div>Enter the second number:3</div>
        <div>Sum of 4 and 3 is 7</div>
        </div>
]]></pText>
    </PageText> 
    
     <PageText>
        <pText><![CDATA[<b>Variable Scope in Python</b>]]></pText>
    </PageText>
    
    <PageText>
        <pText><![CDATA[Global variables are those variables declared out of any function, but can be accessed inside as well as outside the function. Parameters and variables defined inside a function is not visible from outside. Hence, they have a local scope. Lifetime of a variable is the period throughout which the variable exists in the memory. The lifetime of variables inside a function is as longas the function executes. All variables in a program may not be accessible at all locations in that program. This depends on where we have declared a variable. The scope of a variable determines the portion of the program where we can access a particular identifier. They are destroyed once we return from the function. Hence, a function does not remember the value of a variable from its previous calls.
]]></pText>
    </PageText>
     
      <PageText>
        <pText><![CDATA[<b>Example Program</b>]]></pText>
    </PageText>
      
      <PageText>
          <pText><![CDATA[
    <div class = "CodeBox">
    <div>a=10</div>
    <div>def value_change(a): #Function Header </div>
    <div>a=100</div>
    <div>print(“Value inside function=”,a) #prints the value of a inside function </div>
    <div>return</div>
    <div>#Main Program Code </div>
    <div>value_change(a)#Function calling</div>
    <div>print(“Value outside function=”,a) #prints value of a outside function</div>
    </div>
]]></pText>
    </PageText>
      
    <PageText>
        <pText><![CDATA[<b>Output</b>]]></pText>
    </PageText>
     
    <PageText>
        <pText><![CDATA[
        <div class = "TextBorderClass">
        <div>Value inside function= 100</div>
        <div>Value outside function= 10</div>
        </div>
]]></pText>
    </PageText> 
     
    <PageText>
        <pText><![CDATA[<b>Function with more than one return value</b>]]></pText>
    </PageText>
      
    <PageText>
        <pText><![CDATA[Python has a strong mechanism of returning more than one value at a time. This is very flexible when the function needs to return more than one value. Instead of writing separate functions for returning individual values, we can return all the values within same function. The following shows an example for function returning more than one value.]]></pText>
    </PageText>
      
    <PageText>
        <pText><![CDATA[<b>Example Program</b>]]></pText>
    </PageText>
      
      <PageText>
          <pText><![CDATA[
    <div class = "CodeBox">
    <div>#Python Function Returning more than One value</div>
    <div>def calc(a,b):</div>
    <div>sum=a+b</div>
    <div>diff=a-b</div>
    <div>prod=a*b</div>
    <div>quotient=a/b</div>
    <div>return sum, diff, prod, quotient</div>
    <div>a=int(input(“Enter first number:”))</div>
    <div>b=int(input(“Enter second number:”))</div>
    <div>s,d,p,q=calc(a,b)</div>
    <div>print(“Sum=”,s)</div>
    <div>print(“Difference=”,d)</div>
    <div>print(“Product=”,p)</div>
    <div>print(“Quotient=”,q)</div>
    </div>
]]></pText>
    </PageText>
      
    <PageText>
        <pText><![CDATA[<b>Output</b>]]></pText>
    </PageText>
     
    <PageText>
        <pText><![CDATA[
        <div class = "TextBorderClass">
        <div>Enter first number:10</div>
        <div>Enter second number:5 </div>
        <div>Sum= 15</div>
        <div>Difference= 5</div>
        <div>Product= 50</div>
        <div>Quotient= 2</div>
        </div>
]]></pText>
    </PageText> 
      
  </PageData>
</main>